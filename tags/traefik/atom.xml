<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Traefik on ipfans's Blog</title><link>https://www.4async.com/tags/traefik/</link><description>Recent content in Traefik on ipfans's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 01 Aug 2016 11:00:00 +0000</lastBuildDate><atom:link href="https://www.4async.com/tags/traefik/atom.xml" rel="self" type="application/rss+xml"/><item><title>traefik 简介</title><link>https://www.4async.com/2016/08/2016-08-01-introduce-traefik-load-balance/</link><pubDate>Mon, 01 Aug 2016 11:00:00 +0000</pubDate><guid>https://www.4async.com/2016/08/2016-08-01-introduce-traefik-load-balance/</guid><description>traefik(https://traefik.io/) 是一款开源的反向代理与负载均衡工具。它最大的优点是能够与常见的微服务系统直接整合，可以实现自动化动态配置。目前支持 Docker, Swarm, Mesos/Marathon, Mesos, Kubernetes, Consul, Etcd, Zookeeper, BoltDB, Rest API 等等后端模型。
traefik 的具体模型如下： 为什么选择 traefik？ 事实上在之前我对 LB 的选择一直更倾向于使用 HAProxy。但是选择 traefik 主要是有以下特点让我们决定使用：
Golang 编写，单文件部署，与系统无关，同时也提供小尺寸 Docker 镜像。 支持 Docker/Etcd 后端，天然连接我们的微服务集群。 内置 Web UI，管理相对方便。 自动配置 ACME(Let&amp;rsquo;s Encrypt) 证书功能。 性能尚可，我们也没有到压榨 LB 性能的阶段，易用性更重要。 除了这些以外，traefik 还有以下特点：
Restful API 支持。 支持后端健康状态检查，根据状态自动配置。 支持动态加载配置文件和 graceful 重启。 支持 WebSocket 和 HTTP/2。 除了上面提到的微服务化集群支持，一些 AB 测试阶段也可以通过 frontend 的路由特性进行动态分配，当然这些对 HAProxy 等软件都是标准支持的。
traefik 的配置 traefik 支持的配置方式支持文件方式进行配置，这个也是比较常见的配置方式，我们这里简单介绍一下。
traefik 支持的 toml 方式进行配置，官方提供了一个 示例的 traefik.</description></item></channel></rss>