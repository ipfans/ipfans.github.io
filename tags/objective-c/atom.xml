<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Objective-C on ipfans's Blog</title><link>https://www.4async.com/tags/objective-c/</link><description>Recent content in Objective-C on ipfans's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 03 Jan 2014 15:00:00 +0000</lastBuildDate><atom:link href="https://www.4async.com/tags/objective-c/atom.xml" rel="self" type="application/rss+xml"/><item><title>谈谈 block Part 2</title><link>https://www.4async.com/2014/01/2014-01-03-something-about-block-part-two/</link><pubDate>Fri, 03 Jan 2014 15:00:00 +0000</pubDate><guid>https://www.4async.com/2014/01/2014-01-03-something-about-block-part-two/</guid><description>前面看过的 NSConcreteGobalBlock 其实在实际应用里是并不是太多的情况，相对来说，接下来要提到的 NSConcreteStackBlock 则是会经常遇到的情况。
从源码看 NSConcreteStackBlock 还是先从代码来看：
#include &amp;lt;stdio.h&amp;gt; int main(){ int a = 1; int (^block)(void) = ^{printf(&amp;quot;%d\n&amp;quot;, a); return a; }; int b = block(); printf(&amp;quot;%d\n&amp;quot;, b); return 0; } 翻译成 C++ 代码则是：
struct __block_impl { void *isa; int Flags; int Reserved; void *FuncPtr; }; struct __main_block_impl_0 { struct __block_impl impl; struct __main_block_desc_0* Desc; int a; __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, int _a, int flags=0) : a(_a) { impl.</description></item><item><title>谈谈 block Part 1</title><link>https://www.4async.com/2014/01/2014-01-02-something-about-block-part-one/</link><pubDate>Thu, 02 Jan 2014 14:31:00 +0000</pubDate><guid>https://www.4async.com/2014/01/2014-01-02-something-about-block-part-one/</guid><description>Block 概述 Block 是 Apple 提供的一种闭包实现，比较方便实现一些函数嵌套实现的功能。Block 分为三种类型：
NSConcreteGlobalBlock NSConcreteStackBlock NSConcreteMallocBlock 这三种类型分别对应了三种不同的 Block 类型，值得注意的是，在启用了 ARC 之后，NSConcreteStackBlock 会转换类型为 NSConcreteMallocBlock。
换种比较容易的理解的说法：
在非 ARC 下，LLVM 编译下没有访问局部变量的 Block 应该是 NSConcreteGlobalBlock 类型的，访问了局部变量的 Block 是 NSConcreteStackBlock 类型的。
在 ARC 下，访问了局部变量的 Block 是 NSConcreteMallocBlock 类型的，未访问局部变量的 Block 是 NSConcreteGlobalBlock 类型的。
具体的实现代码可以参考 llvm 的 BlockRuntime。
对于研究 block 的具体代码翻译，则可以使用 clang 的 rewrite-objc 功能，将 OC 文件转换成 cpp 文件。比如：
clang -rewrite-objc blocktest.c 这样就可以生成对应的 blocktest.cpp 文件。</description></item></channel></rss>