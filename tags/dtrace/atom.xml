<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>dtrace on ipfans's Blog</title><link>https://www.4async.com/tags/dtrace/</link><description>Recent content in dtrace on ipfans's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 15 Sep 2016 18:00:00 +0000</lastBuildDate><atom:link href="https://www.4async.com/tags/dtrace/atom.xml" rel="self" type="application/rss+xml"/><item><title>使用 dtrace 跟踪 Python 应用</title><link>https://www.4async.com/2016/09/2016-09-15-tracing-python-program-with-dtrace/</link><pubDate>Thu, 15 Sep 2016 18:00:00 +0000</pubDate><guid>https://www.4async.com/2016/09/2016-09-15-tracing-python-program-with-dtrace/</guid><description>今年在 Pycon China 上，来自饿了么的郭浩川分享了 利用 systemtap 进行 Python 执行情况分析 的内容。分享利用 systemtap 在线上环境中实时监控 gevent patch 的 green thread 程序的执行状况。
dtrace 和 systemtap 均支持在 Linux 上进行分析，在 macOS 系统上则只有 dtrace 使用。在 Python3.5 和之前版本中，需要使用手工 Patch 的方式进行埋点监控。在 Python 3.6 以上中 dtrace 和 systemtap 埋点支持功能可以通过编译参数 &amp;ndash;with-dtrace 开启。
从 dtrace 开始 dtrace 是一个低开销的成本动态跟踪工具，可以通过埋点 probs 方式监控各项程序运行状态。dtrace 最初内置在 Solaris 系统中，因此我们可以借助 Solaris 系统的相关文档了解 dtrace 的基本操作。DTrace 用户指南 是 Oracle 提供的基于 Solaris 系统的 dtrace 操作手册，操作基本与其它系统相同，推荐在最初开始阶段阅读该使用手册。
在 macOS 上，已经很多系统底层功能和 framework 中已经集成了 dtrace 的功能。</description></item></channel></rss>