<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>vendor on ipfans's Blog</title><link>https://www.4async.com/tags/vendor/</link><description>Recent content in vendor on ipfans's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 05 Jan 2016 23:13:00 +0000</lastBuildDate><atom:link href="https://www.4async.com/tags/vendor/atom.xml" rel="self" type="application/rss+xml"/><item><title>使用 vendor 管理 Golang 项目依赖</title><link>https://www.4async.com/2016/01/2016-01-05-golang-vendor/</link><pubDate>Tue, 05 Jan 2016 23:13:00 +0000</pubDate><guid>https://www.4async.com/2016/01/2016-01-05-golang-vendor/</guid><description>我们在项目中除了 大量的使用 Python 外，也大量的使用了 Golang 构建高效基础运行服务。在使用 Golang 过程中，我们发现 Golang 程序缺少依赖库版本功能是一个非常令人头大的问题：某些依赖在某个 commit 之后发生了 API 变更之后，如果不修改代码很难兼容，然而开发者之间很有可能因为参与的时间不同，导致执行 go get 命令获取的版本不同，而导致在不同电脑上出现编译不通过问题。同时，在多个程序中，如果使用的 commit 版本不同，也可能会导致程序编译过程中出现不同的问题。
在之前，我们解决这个问题有两个方案，一种是拆解 go get 命令的执行，首先创建对应依赖目录，利用 git 命令切换至指定的 commit，然后执行 go install 命令。另外一种比较省事的方法是使用 godep 工具，这里就不做过多介绍了，具体可以参考文档或者搜索中文教程。
在 Golang1.5 之后，Go 提供了 GO15VENDOREXPERIMENT 环境变量，用于将 go build 时的应用路径搜索调整成为 当前项目目录 / vendor 目录方式。通过这种形式，我们可以实现类似于 godep 方式的项目依赖管理。不过起码在程序编译过程中，再也无需在其他端部署一个 godep 工具。
在使用之前，需要安装一个辅助工具（如果 Golang 自改一个就好了）：go get -u -v github.com/kardianos/govendor。
下面，我们用一个例子来说明。首先有一个名为 vendorproj 的项目。假如只有一个文件：
package main import (&amp;#34;github.com/yeeuu/echoic&amp;#34;) func main() {e := echoic.New() e.</description></item></channel></rss>