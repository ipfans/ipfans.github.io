<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Etcd on ipfans's Blog</title><link>https://www.4async.com/tags/etcd/</link><description>Recent content in Etcd on ipfans's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 31 May 2016 09:13:00 +0000</lastBuildDate><atom:link href="https://www.4async.com/tags/etcd/atom.xml" rel="self" type="application/rss+xml"/><item><title>CoreOS 折腾笔记（三）了解 Etcd</title><link>https://www.4async.com/2016/05/2016-05-31-learning-coreos-part3/</link><pubDate>Tue, 31 May 2016 09:13:00 +0000</pubDate><guid>https://www.4async.com/2016/05/2016-05-31-learning-coreos-part3/</guid><description>服务发现是微服务化架构中重要的一环，服务的配置信息需要有一种可靠高效的发现机制，保证服务上线时可以及时被使用，服务失效中断时可以及时切走。服务发现工具 Etcd 就是为了这种需求开发的。
什么是 Etcd？ Etcd 是一个分布式 KV 数据库，通过将数据分散存储在多台独立的设备上，从而提高数据的可靠性或读写性能。Etcd 是几个比较常见的服务发现应用之一，它支持 TTL 的支持和 HTTP Restful API，同时通过 Raft 一致性算法处理日志复制以保证强一致性。关于 Raft 算法，请参考 这篇文章，这里不多介绍。Etcd 本来就是 CoreOS 团队开发支持的，因此也是原生存在在 CoreOS 系统中。
Etcd 中提供了订阅通知机制，同时提供了一个线上服务 https://discovery.etcd.io/，这个服务可以用于发现集群中的机器。比如 Fleet 等等工具也是基于 Etcd 去发现网络中的节点服务器。在 CoreOS 机器部署之后，系统中一个叫做 cloud-init 的服务会根据之前的 user-data 文件去启动 Etcd。Etcd 会更新对应的自己的节点信息，并且获取其它的节点信息。
另外比较常见的服务发现还有 ZooKeeper（应用最广泛）、Consul 等等，如果有兴趣，可以自己在进行研究。
Etcdctl 使用 工具 etcdctl 是 etcd 的控制程序，我们可以通过执行命令查看所有键值：
core@core-01 ~ $ etcdctl ls / --recursive /coreos.com /coreos.com/network /coreos.com/network/config /coreos.com/network/subnets /coreos.com/network/subnets/10.1.64.0-24 /coreos.com/network/subnets/10.1.48.0-24 /coreos.com/network/subnets/10.1.10.0-24 /coreos.com/updateengine /coreos.com/updateengine/rebootlock /coreos.com/updateengine/rebootlock/semaphore 还可以通过类似 Redis 的 get 等命令获取具体存储内容：</description></item><item><title>CoreOS 折腾笔记（二）Fleet 进阶</title><link>https://www.4async.com/2016/05/2016-05-28-learning-coreos-part2/</link><pubDate>Sat, 28 May 2016 18:00:00 +0000</pubDate><guid>https://www.4async.com/2016/05/2016-05-28-learning-coreos-part2/</guid><description>如果要说什么样子的分布式集群对用户是最友好的，那无疑是对客户来说，像本地执行命令一样方便的执行集群命令肯定是最舒服的了。这个我们在上一节 集群部署 里面就提到了一个叫做 &amp;ldquo;fleetctl&amp;rdquo; 的命令，这个命令是做什么用的呢？
fleet 是什么 工具 fleet 是一个在集群层面上的 systemd 管理工具。它的配置文件语法基于 systemd 的语法，另外添加了一些自有的属性。如果你希望在集群中运行你的服务，那么使用 fleet 管理 systemd 单元是再有必要不过的了。
在比较新的系统 (CentOS 7+、Ubuntu 16+、Debian 8+) 中均采用了 systemd 作为启动项管理工具。如果你对 systemd 有疑问的话，请到其 官方网站 查看具体的介绍，这里不做赘述。
之前使用的 fleetctl 就是 fleet 的管理工具，默认是在集群中的某台机器上进行管理。当然，fleetctl 同样也可以通过远程进行管理，可以通过如下命令连接远程集群。
FLEETCTL_ENDPOINT=http://&amp;lt;IP:[PORT]&amp;gt; fleetctl list-units fleetctl 常见命令 比较常见的 fleetctl 命令有：
core@core-01 ~ $ fleetctl -h ... COMMANDS: cat 查看已经提交的单元文件内容 destroy 销毁集群中的一个或多个单元 fd-forward 将标准输入输出转向到一个 unix socket 中 journal 将集群中的某个 unit 的日志输出到当前 list-machines 查看集群中的已知机器 list-unit-files 查看集群中存在的单元 list-units 查看集群中的单元状态 load 将一个或多个单元加载到集群中，必要时会先执行 submit 功能 ssh 连接到集群中的某台机器 start 启动集群中一个或多个单元，必要时会先执行 submit 和 load 功能 status 输出集群中一个或多个单元的状态 stop 停止集群中一个或多个单元 submit 上传一个或多个单元到集群中，并不会加载执行 unload 卸载集群中的一个或多个单元 fleet 单元文件 以一个 Hello World 程序作为演示来讲解：</description></item></channel></rss>