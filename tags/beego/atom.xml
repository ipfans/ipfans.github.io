<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Beego on ipfans's Blog</title><link>https://www.4async.com/tags/beego/</link><description>Recent content in Beego on ipfans's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 01 Apr 2014 18:46:51 +0000</lastBuildDate><atom:link href="https://www.4async.com/tags/beego/atom.xml" rel="self" type="application/rss+xml"/><item><title>Beego 的几个小 Tips</title><link>https://www.4async.com/2014/04/2014-04-01-beego-tips/</link><pubDate>Tue, 01 Apr 2014 18:46:51 +0000</pubDate><guid>https://www.4async.com/2014/04/2014-04-01-beego-tips/</guid><description>Beego 框架不错，个人比较喜欢，关键是还有一些开发工具很实用，封装了很多实现，不需要自己做很多工作，在不考虑效率的前提下，都是可以接受的范畴。
自定义错误页面 Beego 默认自己带了一些错误页面，在 error.go 文件中进行了定义。以 404 为例：
// show 404 notfound error. func NotFound(rw http.ResponseWriter, r *http.Request) {t, _ := template.New(&amp;#34;beegoerrortemp&amp;#34;).Parse(errtpl) data := make(map[string]interface{}) data[&amp;#34;Title&amp;#34;] = &amp;#34;Page Not Found&amp;#34; data[&amp;#34;Content&amp;#34;] = template.HTML(&amp;#34;&amp;lt;br&amp;gt;The page you have requested has flown the coop.&amp;#34;+&amp;#34;&amp;lt;br&amp;gt;Perhaps you are here because:&amp;#34;+&amp;#34;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;ul&amp;gt;&amp;#34; + &amp;#34;&amp;lt;br&amp;gt;The page has moved&amp;#34;+&amp;#34;&amp;lt;br&amp;gt;The page no longer exists&amp;#34;+&amp;#34;&amp;lt;br&amp;gt;You were looking for your puppy and got lost&amp;#34;+&amp;#34;&amp;lt;br&amp;gt;You like 404 pages&amp;#34;+&amp;#34;&amp;lt;/ul&amp;gt;&amp;#34;) data[&amp;#34;BeegoVersion&amp;#34;] = VERSION //rw.WriteHeader(http.StatusNotFound) t.</description></item></channel></rss>