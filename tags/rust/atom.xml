<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rust on ipfans's Blog</title><link>https://www.4async.com/tags/rust/</link><description>Recent content in Rust on ipfans's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 06 Jan 2016 17:13:00 +0000</lastBuildDate><atom:link href="https://www.4async.com/tags/rust/atom.xml" rel="self" type="application/rss+xml"/><item><title>一个 Rust HttpClient 例子</title><link>https://www.4async.com/2016/01/2016-01-06-rust-http-client/</link><pubDate>Wed, 06 Jan 2016 17:13:00 +0000</pubDate><guid>https://www.4async.com/2016/01/2016-01-06-rust-http-client/</guid><description>在 cargo.toml 文件中添加
[dependencies] hyper = &amp;#34;0.7.2&amp;#34; src 中创建 main.rs
extern crate hyper; use std::io::Read; use hyper::Client; fn main() {println!(&amp;#34;welcome to rust http&amp;#34;); let client = Client::new(); let mut res = client.get(&amp;#34;https://httpbin.org/get&amp;#34;).send().unwrap(); assert_eq!(res.status, hyper::Ok); println!(&amp;#34;headers:\n {}&amp;#34;, res.headers); let mut body = String::new(); res.read_to_string(&amp;amp;mut body).unwrap(); println!(&amp;#34;body:\n {}&amp;#34;, body); res = client.post(&amp;#34;https://httpbin.org/post&amp;#34;).body(&amp;#34;{\&amp;#34;a\&amp;#34;:1}&amp;#34;).send().unwrap(); assert_eq!(res.status, hyper::Ok); println!(&amp;#34;headers:\n {}&amp;#34;, res.headers); let mut body = String::new(); res.read_to_string(&amp;amp;mut body).unwrap(); println!(&amp;#34;body:\n {}&amp;#34;, body); } 执行 cargo build 后执行 .</description></item><item><title>Rust 学习笔记二</title><link>https://www.4async.com/2015/01/2015-01-12-rust-note-2/</link><pubDate>Mon, 12 Jan 2015 20:46:15 +0000</pubDate><guid>https://www.4async.com/2015/01/2015-01-12-rust-note-2/</guid><description>注：rust 目前更新仍旧很频繁，语法变化比较大，学习主要基于 Rust 1.0 Alpha 版本，之后可能会有部分变化。
补充下笔记一中的内容：在 Rust 中变量默认是不能改变的，只有声明为 mut，才可以进行改变。
比如：
let x = 5; x = 7; 会报错 re-assignment of immutable variable，不过下面的方法就可以正常执行了：
let mut x = 5; x = 7; 逻辑控制 一般逻辑控制分为判断分支、循环等等. if 在 rust 中区别不是特别大：
let x = 5; if x == 5 {println!(&amp;#34;x is five!&amp;#34;);} else {println!(&amp;#34;x is not five :(&amp;#34;);} 不过还可以这样写：
let x = 5; let y = if x == 5 {10} else {15}; // y: i32 值得注意的是，下面的写法是不正确的：</description></item><item><title>Rust 学习笔记一</title><link>https://www.4async.com/2015/01/2015-01-11-rust-note-1/</link><pubDate>Sun, 11 Jan 2015 22:00:15 +0000</pubDate><guid>https://www.4async.com/2015/01/2015-01-11-rust-note-1/</guid><description>注：rust 目前更新仍旧很频繁，语法变化比较大，学习主要基于 Rust 1.0 Alpha 版本，之后可能会有部分变化。
先来说下 Rust 的优点：
RAII(Resource Acquisition Is Initialization) ：垃圾回收 GC 是解决内存安全的最普通方式，但是 Rust 系统并不依靠 GC，而是在编译时通过 RAII 实现资源自动释放。 ** 安全便捷的并发开发 ** ：这个后面学习里面会讲到，这个和 Golang 应该算竞争了吧。 ** 高效的执行效率 **：根据测试，rust 的性能应该是超过了 Java 了。（一时半会找不到了，找到补上） 缺点我感觉如下： ** 学习复杂度不低 **：相对 go 或者其他语言，还是复杂很多，学习门槛比较高。 **GC 的问题 **：GC 好处是屏蔽了很多问题，会带来性能问题，比如 Go，Rust 需要了解更多的编译器细节。 Rust 基础 Rust 原文件扩展名是. rs，编译程序名字叫做 rustc。可以使用 rustc xxx.rs 编译成可执行文件。首先还是管用的 hello world:
fn main(){println!(&amp;#34;hello world!&amp;#34;);} println 是一个宏定义，后面会再详细写一下。fn 有点类似表示函数的 function 的定义，说起来，rust 是 Javascript 之父搞的，品位嘛，呵呵。
Rust 安装程序带一个叫做 cargo 的工具，这个工具是用于项目编译的，可以按照下面的路径组织文件：</description></item></channel></rss>