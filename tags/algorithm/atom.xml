<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>algorithm on ipfans's Blog</title><link>https://www.4async.com/tags/algorithm/</link><description>Recent content in algorithm on ipfans's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 11 Apr 2014 13:19:46 +0000</lastBuildDate><atom:link href="https://www.4async.com/tags/algorithm/atom.xml" rel="self" type="application/rss+xml"/><item><title>几种常见加密 / hash 算法效率 (OpenSSL)</title><link>https://www.4async.com/2014/04/2014-04-11-openssl-algorithm-speed-result/</link><pubDate>Fri, 11 Apr 2014 13:19:46 +0000</pubDate><guid>https://www.4async.com/2014/04/2014-04-11-openssl-algorithm-speed-result/</guid><description>正好群里面有人在讨论这个，就单独拿出来记录一下，下次就不用单独跑了。结果只是包含常见的算法性能。
说到常用的算法，之前 QQ 的协议中最早使用的是 xxTEA 算法 [^1]，运算效率高，但是同样的，被破解的几率随着系统硬件性能的提升和手段的进化破解难度大幅降低，所以后来更换成了 blowfish 的算法 [^2]，从效率上来说可以接受，并且强度也是可以接受的范围。当然了，至于密钥，那是另外一个话题了。
OpenSSL 1.0.1g 7 Apr 2014 built on: Mon Apr 7 19:24:10 BST 2014 options:bn(64,64) rc4(ptr,char) des(idx,cisc,16,int) aes(partial) idea(int) blowfish(idx) compiler: clang -fPIC -fno-common -DOPENSSL_PIC -DZLIB_SHARED -DZLIB -DOPENSSL_THREADS -D_REENTRANT -DDSO_DLFCN -DHAVE_DLFCN_H -arch x86_64 -O3 -DL_ENDIAN -Wall -DOPENSSL_IA32_SSE2 -DOPENSSL_BN_ASM_MONT -DOPENSSL_BN_ASM_MONT5 -DOPENSSL_BN_ASM_GF2m -DSHA1_ASM -DSHA256_ASM -DSHA512_ASM -DMD5_ASM -DAES_ASM -DVPAES_ASM -DBSAES_ASM -DWHIRLPOOL_ASM -DGHASH_ASM The 'numbers' are in 1000s of bytes per second processed. type 16 bytes 64 bytes 256 bytes 1024 bytes 8192 bytes md5 27012.</description></item></channel></rss>