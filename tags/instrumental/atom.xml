<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Instrumental on ipfans's Blog</title><link>https://www.4async.com/tags/instrumental/</link><description>Recent content in Instrumental on ipfans's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 05 Feb 2020 18:30:00 +0000</lastBuildDate><atom:link href="https://www.4async.com/tags/instrumental/atom.xml" rel="self" type="application/rss+xml"/><item><title>从 Go 语言的依赖库讲起（2）监控、分布式追踪和日志</title><link>https://www.4async.com/2020/02/2020-02-05-golang-debug-instrumental/</link><pubDate>Wed, 05 Feb 2020 18:30:00 +0000</pubDate><guid>https://www.4async.com/2020/02/2020-02-05-golang-debug-instrumental/</guid><description>&lt;p>我们通常会遇到线上甚至测试中代码出现问题，这些问题可能来自于我们开发过程中的引入的BUG，有些来自于我们的功能未得到理想结果的，甚至有一些问题来自于运行环境的。很多事情可能未必能够足够可控，尤其是上线之后才发现出现了问题。除了我们&lt;a class="link" href="" >前面一篇文章&lt;/a>中介绍了一些测试相关的内容，虽然可以解决一部分问题，但是这些并不能完全杜绝所有问题在线上一定不会出现任何问题。因此我们需要建立对发布/预发环境一套相对完善的监控、诊断机制，保证我们可以尽快进行故障的分析和溯源。&lt;/p></description></item></channel></rss>