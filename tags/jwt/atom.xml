<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>JWT on ipfans's Blog</title><link>https://www.4async.com/tags/jwt/</link><description>Recent content in JWT on ipfans's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 07 Aug 2015 18:11:15 +0000</lastBuildDate><atom:link href="https://www.4async.com/tags/jwt/atom.xml" rel="self" type="application/rss+xml"/><item><title>JWT 介绍</title><link>https://www.4async.com/2015/08/2015-08-07-jwt-basic/</link><pubDate>Fri, 07 Aug 2015 18:11:15 +0000</pubDate><guid>https://www.4async.com/2015/08/2015-08-07-jwt-basic/</guid><description>JWT 是什么 JWT 全称是 JSON Web Tokens，是 RFC 7519 标准，用于安全校验两方可信性的安全措施。
JWT 解决了哪些问题？ JWT 本身设计是用于解决 Session 机制不能够很好的在 SPA/API 类型 (restful) 应用中处理身份认证问题。通常 API 的调用是无状态（stateless）的，使用 Session 等形式会有上下文要求。如当用户登录完成后，可以通过下发 JWT 的形式进行无状态的 API 调用。在此之前通常是使用的方式包括不限于如 Basic Auth、Oauth2 或 Token 形式进行。
JWT 相比是额外添加了签名校验方式，本质上来说对抗如暴力碰撞等形式有一些作用。但是由于本身长度的限制，存储的信息量有限。
JWT 处理方式 JWT 内容主要分为三段，分别对应头部信息，存储数据和签名信息三部分，中间使用『.』符号连接，三段信息均进行 Base64 编码。
具体实现方式可参考如下伪代码实现：
encodeBase64(header) + &amp;#39;.&amp;#39; + encodeBase64(payload) + &amp;#39;.&amp;#39; + Sign(key + encodeBase64(header) + &amp;#39;.&amp;#39; + encodeBase64(payload)) 其中 Sign 的算法是可以在 header 中进行定义，支持如 HMAC-SHA256 和 RSA-SHA256 等方式。key 则是用于验证的 key 信息。
其中 header 格式如下:</description></item></channel></rss>